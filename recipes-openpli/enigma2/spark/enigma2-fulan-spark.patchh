--- enigma2-openpli-fulan.org/configure.ac
+++ enigma2-openpli-fulan/configure.ac
@@ -29,24 +29,6 @@
 AM_CONDITIONAL(HAVE_GIT_DIR, test -d "$srcdir/.git")
 AM_CONDITIONAL(HAVE_FAKE_GIT_DIR, test -f "$srcdir/.git/last_commit_info")
 
-AC_ARG_ENABLE(spark,
-	[  --enable-spark          enable spark stuff],
-	[AC_DEFINE(ENABLE_SPARK,1,[enable spark stuff])])
-
-AM_CONDITIONAL(ENABLE_SPARK,test "$enable_spark" = "yes")
-if test "$enable_spark" = "yes"; then
-	AC_DEFINE(ENABLE_SPARK,1,[enable spark stuff])
-fi
-
-AC_ARG_ENABLE(spark7162,
-	[  --enable-spark7162          enable spark7162 stuff],
-	[AC_DEFINE(ENABLE_SPARK7162,1,[enable spark7162 stuff])])
-
-AM_CONDITIONAL(ENABLE_SPARK7162,test "$enable_spark7162" = "yes")
-if test "$enable_spark7162" = "yes"; then
-	AC_DEFINE(ENABLE_SPARK7162,1,[enable spark7162 stuff])
-fi
-
 AC_ARG_ENABLE(minimal,
 	[  --enable-minimal          enable minimal config],
 	[AC_DEFINE(ENABLE_MINIMAL, 1, [enable minimal config])])
@@ -61,6 +43,158 @@
 PKG_CHECK_MODULES(LIBDDVD, libdreamdvd, HAVE_LIBDDVD="yes", HAVE_LIBDDVD="no")
 AM_CONDITIONAL(HAVE_LIBDDVD, test "$HAVE_LIBDDVD" = "yes")
 PKG_CHECK_MODULES(AVAHI, avahi-client)
+
+AC_ARG_ENABLE(tf7700,
+	[  --enable-tf7700          enable topfield tf7700 stuff],
+	[AC_DEFINE(ENABLE_TF7700, 1, [enable topfield tf7700 stuff])])
+if test "$enable_tf7700" = "yes"; then
+	AC_DEFINE(ENABLE_TF7700, 1, [enable topfield tf7700 stuff])
+fi
+AM_CONDITIONAL(ENABLE_TF7700, test "$enable_tf7700" = "yes")
+
+AC_ARG_ENABLE(cuberevo,
+	[  --enable-cuberevo        enable cuberevo stuff],
+	[AC_DEFINE(ENABLE_CUBEREVO, 1, [enable cuberevo stuff])])
+if test "$enable_cuberevo" = "yes"; then
+	AC_DEFINE(ENABLE_CUBEREVO, 1, [enable cuberevo stuff])
+fi
+AM_CONDITIONAL(ENABLE_CUBEREVO, test "$enable_cuberevo" = "yes")
+
+AC_ARG_ENABLE(cuberevo_250hd,
+	[  --enable-cuberevo_250hd    enable cuberevo_250hd stuff],
+	[AC_DEFINE(ENABLE_CUBEREVO_250HD, 1, [enable cuberevo_250hd stuff])])
+if test "$enable_cuberevo_250hd" = "yes"; then
+	AC_DEFINE(ENABLE_CUBEREVO_250HD, 1, [enable cuberevo_250hd stuff])
+fi
+AM_CONDITIONAL(ENABLE_CUBEREVO_250HD, test "$enable_cuberevo_250hd" = "yes")
+
+AC_ARG_ENABLE(cuberevo_2000hd,
+	[  --enable-cuberevo_2000hd    enable cuberevo_2000hd stuff],
+	[AC_DEFINE(ENABLE_CUBEREVO_2000HD, 1, [enable cuberevo_2000hd stuff])])
+if test "$enable_cuberevo_2000hd" = "yes"; then
+	AC_DEFINE(ENABLE_CUBEREVO_2000HD, 1, [enable cuberevo_2000hd stuff])
+fi
+AM_CONDITIONAL(ENABLE_CUBEREVO_2000HD, test "$enable_cuberevo_2000hd" = "yes")
+
+AC_ARG_ENABLE(cuberevo_3000hd,
+	[  --enable-cuberevo_3000hd    enable cuberevo_3000hd stuff],
+	[AC_DEFINE(ENABLE_CUBEREVO_3000HD, 1, [enable cuberevo_3000hd stuff])])
+if test "$enable_cuberevo_3000hd" = "yes"; then
+	AC_DEFINE(ENABLE_CUBEREVO_3000HD, 1, [enable cuberevo_3000hd stuff])
+fi
+AM_CONDITIONAL(ENABLE_CUBEREVO_3000HD, test "$enable_cuberevo_3000hd" = "yes")
+
+AC_ARG_ENABLE(cuberevo_mini,
+	[  --enable-cuberevo_mini      enable cuberevo_mini stuff],
+	[AC_DEFINE(ENABLE_CUBEREVO_MINI, 1, [enable cuberevo_mini stuff])])
+if test "$enable_cuberevo_mini" = "yes"; then
+	AC_DEFINE(ENABLE_CUBEREVO_MINI, 1, [enable cuberevo_mini stuff])
+fi
+AM_CONDITIONAL(ENABLE_CUBEREVO_MINI, test "$enable_cuberevo_mini" = "yes")
+
+AC_ARG_ENABLE(cuberevo_mini2,
+	[  --enable-cuberevo_mini2     enable cuberevo_mini2 stuff],
+	[AC_DEFINE(ENABLE_CUBEREVO_MINI2, 1, [enable cuberevo_mini2 stuff])])
+if test "$enable_cuberevo_mini2" = "yes"; then
+	AC_DEFINE(ENABLE_CUBEREVO_MINI2, 1, [enable cuberevo_mini2 stuff])
+fi
+AM_CONDITIONAL(ENABLE_CUBEREVO_MINI2, test "$enable_cuberevo_mini2" = "yes")
+
+AC_ARG_ENABLE(cuberevo_mini,
+	[  --enable-cuberevo_mini      enable cuberevo_mini stuff],
+	[AC_DEFINE(ENABLE_CUBEREVO_MINI, 1, [enable cuberevo_mini stuff])])
+if test "$enable_cuberevo_mini" = "yes"; then
+	AC_DEFINE(ENABLE_CUBEREVO_MINI, 1, [enable cuberevo_mini stuff])
+fi
+AM_CONDITIONAL(ENABLE_CUBEREVO_MINI, test "$enable_cuberevo_mini" = "yes")
+
+AC_ARG_ENABLE(spark,
+	[  --enable-spark             enable spark stuff],
+	[AC_DEFINE(ENABLE_SPARK, 1, [enable spark stuff])])
+if test "$enable_spark" = "yes"; then
+	AC_DEFINE(ENABLE_SPARK, 1, [enable spark stuff])
+fi
+AM_CONDITIONAL(ENABLE_SPARK, test "$enable_spark" = "yes")
+
+AC_ARG_ENABLE(spark7162,
+	[  --enable-spark7162         enable spark7162 stuff],
+	[AC_DEFINE(ENABLE_SPARK7162, 1, [enable spark7162 stuff])])
+if test "$enable_spark7162" = "yes"; then
+	AC_DEFINE(ENABLE_SPARK7162, 1, [enable spark7162 stuff])
+fi
+AM_CONDITIONAL(ENABLE_SPARK7162, test "$enable_spark7162" = "yes")
+
+AC_ARG_ENABLE(atevio7500,
+	[  --enable-atevio7500        enable atevio7500 stuff],
+	[AC_DEFINE(ENABLE_ATEVIO7500, 1, [enable atevio7500 stuff])])
+if test "$enable_atevio7500" = "yes"; then
+	AC_DEFINE(ENABLE_ATEVIO7500, 1, [enable atevio7500 stuff])
+fi
+AM_CONDITIONAL(ENABLE_ATEVIO7500, test "$enable_atevio7500" = "yes")
+
+AC_ARG_ENABLE(fortis_hdbox,
+	[  --enable-fortis_hdbox      enable fortis_hdbox stuff],
+	[AC_DEFINE(ENABLE_FORTIS_HDBOX, 1, [enable fortis_hdbox stuff])])
+if test "$enable_fortis_hdbox" = "yes"; then
+	AC_DEFINE(ENABLE_FORTIS_HDBOX, 1, [enable fortis_hdbox stuff])
+fi
+AM_CONDITIONAL(ENABLE_FORTIS_HDBOX, test "$enable_fortis_hdbox" = "yes")
+
+AC_ARG_ENABLE(octagon1008,
+	[  --enable-octagon1008       enable octagon1008 stuff],
+	[AC_DEFINE(ENABLE_OCTAGON1008, 1, [enable octagon1008 stuff])])
+if test "$enable_octagon1008" = "yes"; then
+	AC_DEFINE(ENABLE_OCTAGON1008, 1, [enable octagon1008 stuff])
+fi
+AM_CONDITIONAL(ENABLE_OCTAGON1008, test "$enable_octagon1008" = "yes")
+
+AC_ARG_ENABLE(hs7110,
+	[  --enable-hs7110            enable hs7110 stuff],
+	[AC_DEFINE(ENABLE_HS7110, 1, [enable hs7110 stuff])])
+if test "$enable_hs7110" = "yes"; then
+	AC_DEFINE(ENABLE_HS7110, 1, [enable hs7110 stuff])
+fi
+AM_CONDITIONAL(ENABLE_HS7110, test "$enable_hs7110" = "yes")
+
+AC_ARG_ENABLE(hs7119,
+	[  --enable-hs7119            enable hs7119 stuff],
+	[AC_DEFINE(ENABLE_HS7119, 1, [enable hs7119 stuff])])
+if test "$enable_hs7119" = "yes"; then
+	AC_DEFINE(ENABLE_HS7119, 1, [enable hs7119 stuff])
+fi
+AM_CONDITIONAL(ENABLE_HS7119, test "$enable_hs7119" = "yes")
+
+AC_ARG_ENABLE(hs7420,
+	[  --enable-hs7420            enable hs7420 stuff],
+	[AC_DEFINE(ENABLE_HS7420, 1, [enable hs7420 stuff])])
+if test "$enable_hs7420" = "yes"; then
+	AC_DEFINE(ENABLE_HS7420, 1, [enable hs7420 stuff])
+fi
+AM_CONDITIONAL(ENABLE_HS7420, test "$enable_hs7420" = "yes")
+
+AC_ARG_ENABLE(hs7429,
+	[  --enable-hs7429            enable hs7429 stuff],
+	[AC_DEFINE(ENABLE_HS7429, 1, [enable hs7429 stuff])])
+if test "$enable_hs7429" = "yes"; then
+	AC_DEFINE(ENABLE_HS7429, 1, [enable hs7429 stuff])
+fi
+AM_CONDITIONAL(ENABLE_HS7429, test "$enable_hs7429" = "yes")
+
+AC_ARG_ENABLE(hs7810a,
+	[  --enable-hs7810a           enable hs7810a stuff],
+	[AC_DEFINE(ENABLE_HS7810A, 1, [enable hs7810a stuff])])
+if test "$enable_hs7810a" = "yes"; then
+	AC_DEFINE(ENABLE_HS7810A, 1, [enable hs7810a stuff])
+fi
+AM_CONDITIONAL(ENABLE_HS7810A, test "$enable_hs7810a" = "yes")
+
+AC_ARG_ENABLE(hs7819,
+	[  --enable-hs7819            enable hs7819 stuff],
+	[AC_DEFINE(ENABLE_HS7819, 1, [enable hs7819 stuff])])
+if test "$enable_hs7819" = "yes"; then
+	AC_DEFINE(ENABLE_HS7819, 1, [enable hs7819 stuff])
+fi
+AM_CONDITIONAL(ENABLE_HS7819, test "$enable_hs7819" = "yes")
 
 AC_CHECK_LIB([udfread], [udfread_init])
 AC_CHECK_LIB([dl], [dlopen], [LIBDL_LIBS="-ldl"], [AC_MSG_ERROR([Could not find libdl])])
--- enigma2-openpli-fulan.org/lib/driver/vfd.cpp
+++ enigma2-openpli-fulan/lib/driver/vfd.cpp
@@ -1,3 +1,47 @@
+/*
+ * vfd.cpp
+ *
+ * (c) 20?? ?
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+ *
+ *
+ ****************************************************************************
+ *
+ * VFD/LED driver for enigma2.
+ *
+ ****************************************************************************
+ *
+ * Changes
+ *
+ * Date     By              Description
+ * --------------------------------------------------------------------------
+ * 20130905 Audioniek       Code for Sparks added in.
+ * 20130905 Audioniek       vfd_write_string_scrollText now uses actual
+ *                          display length in stead of always 16.
+ * 20131021 Audioniek       Octagon 1008 (Fortis HS9510) added.
+ * 20131130 Audioniek       HDBOX (Fortis FS9000/9200) added
+ * 20131210 Audioniek       Sign on string now scrolls once if longer than
+ *                          displaylength.
+ * 20140221 Audioniek       Fortis HS7119 and HS7819 added.
+ * 20140527 Audioniek       Spark7162 spins circle on init.
+ * 20150316 Audioniek       Spark7162 circle spin on init removed.
+ * 20160101 Audioniek       Fortis HS7420 and HS7429 added.
+ * 20170313 Audioniek       Kathrein UFS910/912 added.
+ *
+ ****************************************************************************/
 #include <stdarg.h>
 #include <stdlib.h>
 #include <unistd.h>
@@ -12,25 +56,33 @@
 #include <lib/base/eerror.h>
 #include <lib/driver/vfd.h>
 
+#ifdef ENABLE_TF7700
+#include "../../../apps/tools/tffpctl/frontpanel.h"
+#endif
+
 #define VFD_DEVICE "/dev/vfd"
-#define VFDICONDISPLAYONOFF   0xc0425a0a
 #define VFDDISPLAYCHARS       0xc0425a00
 #define VFDBRIGHTNESS         0xc0425a03
 //light on off
 #define VFDDISPLAYWRITEONOFF  0xc0425a05
-#define VFDDISPLAYCLR		0xc0425b00
-#define VFDLENGTH 16
+#define VFDICONDISPLAYONOFF   0xc0425a0a
+#define VFDSETFAN             0xc0425af8
+#define VFDSETLED             0xc0425afe
 
 bool startloop_running = false;
 static bool icon_onoff[45];
+//static bool icon_onoff[LAST_ICON];
+static int led_onoff[7];
+//static int led_onoff[LAST_LED];
 static pthread_t thread_start_loop = 0;
 void * start_loop (void *arg);
-bool blocked = false;
-bool requested = false;
+bool blocked    = false;
+bool requested  = false;
 bool VFD_CENTER = false;
+int VFD_SCROLL  = 1;  // 1=scroll once
 bool scoll_loop = false;
-int VFD_SCROLL = 1;
-
+
+char chars[64];
 char g_str[64];
 
 struct vfd_ioctl_data
@@ -40,11 +92,32 @@
 	unsigned char length;
 };
 
-struct set_icon_s {
+struct set_icon_s
+{
 	int icon_nr;
 	int on;
 };
 
+#if defined ENABLE_TF7700
+	#define MAX_CHARS 8
+	#define VFDLENGTH 8
+#elif defined (ENABLE_HS7810A) \
+   || defined (ENABLE_HS7819) \
+   || defined (ENABLE_HS7119) \
+   || defined (ENABLE_SPARK)
+	#define VFDLENGTH 4
+#elif defined (ENABLE_OCTAGON1008) \
+   || defined(ENABLE_HS7420) \
+   || defined(ENABLE_HS7429) \
+   || defined (ENABLE_SPARK7162)
+	#define VFDLENGTH 8
+#elif defined (ENABLE_FORTIS_HDBOX) \
+   || defined (ENABLE_ATEVIO7500)
+	#define VFDLENGTH 12
+#else
+	#define VFDLENGTH 16
+#endif
+
 evfd* evfd::instance = NULL;
 
 evfd* evfd::getInstance()
@@ -57,14 +130,28 @@
 evfd::evfd()
 {
 	file_vfd = 0;
-	vfd_type=8;
-	FILE *vfd_proc = fopen ("/proc/aotom/display_type", "r");
-	if (vfd_proc)
-	{	char buf[2];
-		fread(&buf,sizeof(buf),1,vfd_proc);
-		vfd_type=atoi(&buf[0]);
-		fclose (vfd_proc);
-	}
+	memset ( chars, ' ', 63 );
+#if defined(ENABLE_SPARK)
+	vfd_type = 4;
+#elif defined(ENABLE_ATEVIO7500)
+	vfd_type = 5;
+#elif defined(ENABLE_FORTIS_HDBOX)
+	vfd_type = 6;
+#elif defined(ENABLE_OCTAGON1008)
+	vfd_type = 7;
+#elif defined(ENABLE_SPARK7162)
+	vfd_type = 8;
+#elif defined(ENABLE_HS7810A) || defined(ENABLE_HS7819) || defined(ENABLE_HS7119)
+	vfd_type = 9;
+#elif defined(ENABLE_HS7110)
+	vfd_type = 10;
+#elif defined(ENABLE_HS7420) || defined(ENABLE_HS7429)
+	vfd_type = 11;
+#elif defined(ENABLE_UFS912) || defined(ENABLE_UFS913)
+	vfd_type = 12;
+#else
+	vfd_type = -1;
+#endif
 }
 
 void evfd::init()
@@ -77,46 +164,468 @@
 {
 	//close (file_vfd);
 }
+//#if defined ENABLE_SPARK
+//krak! This is a Spark
+//#endif
+
+#ifdef ENABLE_TF7700
+
+char * getProgress()
+{
+	int n;
+	static char progress[20] = "0";
+	int fd = open ("/proc/progress", O_RDONLY);
+
+	if (fd < 0)
+	{
+		return 0;
+	}
+	n = read(fd, progress, sizeof(progress));
+	close(fd);
+
+	if (n < 0)
+	{
+		n = 0;
+	}
+	else if((n > 1) && (progress[n-1] == 0xa))
+	{
+		n--;
+	}
+	progress[n] = 0;
+	return progress;
+}
+
+void * start_loop (void *arg)
+{
+	int fplarge = open ("/dev/fplarge", O_WRONLY);
+	int fpsmall = open ("/dev/fpsmall", O_WRONLY);
+	int fpc = open ("/dev/fpc", O_WRONLY);
+//	char spc[10];
+
+	if ((fplarge < 0) || (fpsmall < 0) || (fpc < 0))
+	{
+		printf("Failed opening devices (%d, %d, %d)\n", fplarge, fpsmall, fpc);
+		return NULL;
+	}
+	blocked = true;
+
+	// set scroll mode
+	//frontpanel_ioctl_scrollmode scrollMode = {2, 10, 15};
+	//ioctl(fpc, FRONTPANELSCROLLMODE, &scrollMode);
+
+	// display string
+	char str[] = "        TOPFIELD TF77X0 ENIGMA2";
+	int length = strlen(str);
+	char dispData[MAX_CHARS + 1];
+	int offset = 0;
+	int i;
+
+	frontpanel_ioctl_icons icons = {0, 0, 0xf};
+
+	// start the display loop
+	char * progress = getProgress();
+	int index = 2;
+	while (!requested)
+	{
+		// display the CD segments
+		icons.Icons2 = (((1 << index) - 1)) & 0x1ffe;
+		ioctl(fpc, FRONTPANELICON, &icons);
+		index++;
+		if (index > 13)
+		{
+			index = 2;
+			icons.BlinkMode = (~icons.BlinkMode) & 0xf;
+		}
+
+		// display the visible part of the string
+		for (i = 0; i < MAX_CHARS; i++)
+		{
+			dispData[i] = str[(offset + i) % length];
+		}
+		offset++;
+		write(fplarge, dispData, sizeof(dispData));
+		usleep(200000);
+		if ((index % 4) == 0)
+		{
+			// display progress
+			progress = getProgress();
+//			if (strlen(progress) == 1)
+//			{
+//				spc = "  ";
+//			}
+//			if (strlen(progress) == 2)
+//			{
+//				spc = " ";
+//			}
+//			strcat(spc, progress);
+			write(fpsmall, progress, strlen(progress) + 1);
+			if (strncmp("100", progress, 3) == 0)
+			{
+				break;
+			}
+		}
+	}
+	// clear all icons
+	frontpanel_ioctl_icons iconsOff = {0xffffffff, 0xffffffff, 0x0};
+	ioctl(fpc, FRONTPANELICON, &iconsOff);
+
+	// clear display
+	write(fpsmall, "    ", 5);
+	write(fplarge, "        ", MAX_CHARS);
+
+	close(fplarge);
+	close(fpsmall);
+	close(fpc);
+	blocked = false;
+
+	return NULL;
+}
+#else  //next code for boxes other than Topfield TF7700HDPVR
 
 void * start_loop (void *arg)
 {
 	evfd vfd;
 	blocked = true;
-	//vfd.vfd_clear_icons();
-	vfd.vfd_write_string("-00-", true);
-	//run 2 times through all icons 
-	if (vfd.getVfdType() != 4)
-	{
-		memset(&icon_onoff,0, sizeof(icon_onoff));
-		static const unsigned char brightness[14]={1,2,3,4,5,6,7,6,5,4,3,2,1,0};
-
-		for (int vloop = 0; vloop < 128; vloop++)
-		{
-			vfd.vfd_set_brightness(brightness[vloop%14]);
-			usleep(75000);
-		}
-
-		vfd.vfd_set_brightness(7);
-	}
+	#if defined ENABLE_SPARK7162
+		char str[] = "SPARK7162 ENIGMA2";
+	#elif defined ENABLE_SPARK
+		char str[] = "SPARK ENIGMA2";
+	#elif defined ENABLE_FORTIS_HDBOX
+		char str[] = "FS9000/9200 Enigma2";
+	#elif defined ENABLE_OCTAGON1008
+		char str[] = "HS9510 Enigma2";
+	#elif defined ENABLE_ATEVIO7500
+		char str[] = "HS8200 Enigma2";
+	#elif defined ENABLE_HS7119
+		char str[] = "7119 Enigma2";
+	#elif defined ENABLE_HS7420
+		char str[] = "HS7420 Enigma2";
+	#elif defined ENABLE_HS7810A
+		char str[] = "7810 Enigma2";
+	#elif defined ENABLE_HS7429
+		char str[] = "HS7429 Enigma2";
+	#elif defined ENABLE_HS7819
+		char str[] = "7819 Enigma2";
+	#elif defined ENABLE_UFS910
+		char str[] = "UFS910 Enigma2";
+	#elif defined ENABLE_UFS912
+		char str[] = "UFS912 Enigma2";
+	#elif defined ENABLE_UFS913
+		char str[] = "UFS913 Enigma2";
+	#else
+		char str[] = "SH4 Git Enigma2";
+	#endif
+	int vfddev = open ("/dev/vfd", O_WRONLY);
+	write(vfddev, str, strlen(str));
+	close(vfddev);
+
+	/*these boxes can control display brightness*/
+	#if !defined(ENABLE_FORTIS_HDBOX) \
+	 && !defined(ENABLE_OCTAGON1008) \
+	 && !defined(ENABLE_ATEVIO7500) \
+	 && !defined(ENABLE_CUBEREVO) \
+	 && !defined(ENABLE_CUBEREVO_MINI) \
+	 && !defined(ENABLE_CUBEREVO_MINI2) \
+	 && !defined(ENABLE_CUBEREVO_MINI_FTA) \
+	 && !defined(ENABLE_CUBEREVO_250HD) \
+	 && !defined(ENABLE_CUBEREVO_2000HD) \
+	 && !defined(ENABLE_CUBEREVO_9500HD) \
+	 && !defined(ENABLE_SPARK7162) \
+	 && !defined ENABLE_UFS912 \
+	 && !defined ENABLE_UFS913 \
+	 && !defined(ENABLE_HS7119) \
+	 && !defined(ENABLE_HS7420) \
+	 && !defined(ENABLE_HS7429) \
+	 && !defined(ENABLE_HS7810A) \
+	 && !defined(ENABLE_HS7819)
+	/* Others cycle their icons */
+	for (int vloop = 0; vloop < 128; vloop++)
+	{
+		if (vloop%2 == 1)
+		{
+			vfd.vfd_set_icon((((vloop%32)/2)%16), ICON_OFF, true);
+			usleep(2000);
+			vfd.vfd_set_icon(((((vloop%32)/2)%16)+1), ICON_ON, true);
+		}
+	}
+	#else //modulate brightness 3 times
+	for (int vloop = 0; vloop < 3 * 14; vloop++)
+	{
+		if (vloop%14 == 0)
+		{
+			vfd.vfd_set_brightness(6);
+		}
+		else if (vloop%14 == 1)
+		{
+			vfd.vfd_set_brightness(5);
+		}
+		else if (vloop%14 == 2)
+		{
+			vfd.vfd_set_brightness(4);
+		}
+		else if (vloop%14 == 3)
+		{
+			vfd.vfd_set_brightness(3);
+		}
+		else if (vloop%14 == 4)
+		{
+			vfd.vfd_set_brightness(2);
+		}
+		else if (vloop%14 == 5)
+		{
+			vfd.vfd_set_brightness(1);
+		}
+		else if (vloop%14 == 6)
+		{
+			vfd.vfd_set_brightness(0);
+		}
+		else if (vloop%14 == 7)
+		{
+			vfd.vfd_set_brightness(1);
+		}
+		else if (vloop%14 == 8)
+		{
+			vfd.vfd_set_brightness(2);
+		}
+		else if (vloop%14 == 9)
+		{
+			vfd.vfd_set_brightness(3);
+		}
+		else if (vloop%14 == 10)
+		{
+			vfd.vfd_set_brightness(4);
+		}
+		else if (vloop%14 == 11)
+		{
+			vfd.vfd_set_brightness(5);
+		}
+		else if (vloop%14 == 12)
+		{
+			vfd.vfd_set_brightness(6);
+		}
+		else if (vloop%14 == 13)
+		{
+			vfd.vfd_set_brightness(7);
+		}
+		usleep(75000);
+	}
+	vfd.vfd_set_brightness(7); // set final brightness
+	#endif
+	vfd.vfd_clear_icons();
+	#if !defined(ENABLE_FORTIS_HDBOX) \
+	 && !defined(ENABLE_OCTAGON1008) \
+	 && !defined(ENABLE_ATEVIO7500) \
+	 && !defined(ENABLE_CUBEREVO) \
+	 && !defined(ENABLE_CUBEREVO_MINI) \
+	 && !defined(ENABLE_CUBEREVO_MINI2) \
+	 && !defined(ENABLE_CUBEREVO_MINI_FTA) \
+	 && !defined(ENABLE_CUBEREVO_250HD) \
+	 && !defined(ENABLE_CUBEREVO_2000HD) \
+	 && !defined(ENABLE_CUBEREVO_9500HD) \
+	 && !defined(ENABLE_SPARK7162)
+	//set all blocked icons
+	for (int id = 0x10; id < 0x20; id++)
+	{
+		vfd.vfd_set_icon(id, icon_onoff[id]);
+	}
+	#endif
 	blocked = false;
 	return NULL;
 }
-
-void evfd::vfd_write_string(const char * str)
+#endif // ifdef ENABLE_TF7700
+
+#if defined(ENABLE_FORTIS_HDBOX) \
+ || defined(ENABLE_OCTAGON1008) \
+ || defined(ENABLE_ATEVIO7500) \
+ || defined(ENABLE_CUBEREVO) \
+ || defined(ENABLE_CUBEREVO_MINI) \
+ || defined(ENABLE_CUBEREVO_MINI2) \
+ || defined(ENABLE_CUBEREVO_MINI_FTA) \
+ || defined(ENABLE_CUBEREVO_250HD) \
+ || defined(ENABLE_CUBEREVO_2000HD) \
+ || defined(ENABLE_CUBEREVO_9500HD) \
+ || defined(ENABLE_SPARK) \
+ || defined(ENABLE_SPARK7162) \
+ || defined(ENABLE_HS7420) \
+ || defined(ENABLE_HS7429) \
+ || defined(ENABLE_HS7119) \
+ || defined(ENABLE_HS7810A) \
+ || defined(ENABLE_HS7819)
+void evfd::vfd_write_string_scrollText(char* text)
+{
+	return;
+}
+
+// We cannot use a member function (vfd_write_string_scrollText) in pthread,
+// so we use a second (same content) non member function (vfd_write_string_scrollText1)
+static void *vfd_write_string_scrollText1(void *arg)
+{
+	pthread_setcanceltype(PTHREAD_CANCEL_ASYNCHRONOUS, NULL);
+	bool scoll_loop = true;
+	char out[VFDLENGTH+1];
+	int i, len;
+	evfd vfd;
+	len = strlen((char *) g_str);
+	memset(out, ' ', VFDLENGTH+1);
+	while (scoll_loop && (len > VFDLENGTH))
+	{
+		if (blocked)
+		{
+			usleep(750000); //0.75s pause between scroll loops?
+		}
+		else
+		{
+			scoll_loop = false;
+		}
+		for (i = 0; i <= (len-VFDLENGTH); i++) //scroll part 1: write full string scrolling and wait 0.75s between scrolls
+		{
+			if (blocked)
+			{
+				memset(out, ' ', VFDLENGTH); //fill buffer with spaces
+				memcpy(out, g_str+i, VFDLENGTH); ///then put string in
+				vfd.vfd_write_string(out, true);  //print string on VFD
+				usleep(750000); //0.75 sec character delay
+			}
+			else
+			{
+				scoll_loop = false;
+				i = len-VFDLENGTH;
+			}
+		}
+		for (i = 1; i <= VFDLENGTH; i++) //scroll part 2: write full string shifted 1 character scrolling and wait 0.75s between scrolls
+		{
+			if (blocked)
+			{
+				memset(out, ' ', VFDLENGTH); //fill buffer with spaces
+				memcpy(out, g_str+len+i-VFDLENGTH, VFDLENGTH-i); // copy string shifted 1 character
+				vfd.vfd_write_string(out, true);
+				usleep(750000); //0.75 sec character delay
+			}
+			else
+			{
+				scoll_loop = false;
+				i = VFDLENGTH;
+			}
+		}
+		memcpy(out, g_str, VFDLENGTH);
+		vfd.vfd_write_string(out, true); //final display: write 1st VFDLENGTH characters
+		if (VFD_SCROLL != 2 || !blocked)
+		{
+			scoll_loop = false;
+		}
+		else
+		{
+			sleep(1); //1 sec delay between loops
+		}
+	}
+	blocked = false;
+	return NULL;
+}
+
+void evfd::vfd_write_string(char * str)
+{
+	int i = strlen(str);
+
+	if (i > 63)
+	{
+		i = 63;
+	}
+	if (blocked)
+	{
+		pthread_cancel(thread_start_loop);
+		pthread_join(thread_start_loop, NULL);
+		blocked = false;
+	}
+	memset(g_str, ' ', 64); //clear scroll buffer
+	strcpy(g_str, str); //and set display string in it
+	vfd_write_string(str, false); //initial display: 1st VFDLENGTH characters
+	if (i > VFDLENGTH && VFD_SCROLL) //if string longer than display and scroll mode
+	{
+		blocked = true;
+		pthread_create(&thread_start_loop, NULL, vfd_write_string_scrollText1, (void *)str);
+		pthread_detach(thread_start_loop);
+	}
+}
+
+void evfd::vfd_write_string(char * str, bool force)
+{
+	int ws = 0;
+	int i = strlen(str);
+
+	if (VFD_CENTER == true)
+	{
+		if (i < VFDLENGTH)
+			ws=(VFDLENGTH-i)/2;
+		else
+			ws = 0;
+	}
+
+	if (i > VFDLENGTH)
+	{
+		i = VFDLENGTH;
+	}
+
+	struct vfd_ioctl_data data;
+	memset(data.data, ' ', VFDLENGTH);
+	if (VFD_CENTER == true)
+	{
+		memcpy(data.data+ws, str, VFDLENGTH-ws);
+	}
+	else
+	{
+		memcpy(data.data, str, i);
+	}
+	data.start = 0;
+	if (VFD_CENTER == true)
+	{
+		data.length = i+ws<=VFDLENGTH?i+ws:VFDLENGTH;
+	}
+	else
+	{
+		data.length = i;
+	}
+	file_vfd = open (VFD_DEVICE, O_WRONLY);
+	write(file_vfd,data.data,data.length);
+	close (file_vfd);
+//	return;
+}
+
+#else
+
+void evfd::vfd_write_string(char * str)
 {
 	vfd_write_string(str, false);
 }
 
 void evfd::vfd_write_string(const char * str, bool force)
 {
+	int i = strlen(str);
+	if (i > 63)
+	{
+		i = 63;
+	}
+	memset (chars, ' ', 63);
+	memcpy (chars, str, i);
+	#ifdef ENABLE_TF7700
+	// request the display to cancel the start loop
+	requested = true;
+	while(blocked)
+	{
+		usleep(200000);
+	}
+	#else
 	if (!blocked || force)
+	#endif
 	{
 		struct vfd_ioctl_data data;
-		data.length = (unsigned char)snprintf((char*)data.data, sizeof(data.data), "%s", str);
+		memset (data.data, ' ', 63);
+		memcpy (data.data, str, i);
+
 		data.start = 0;
+		data.length = i;
 
 		file_vfd = open (VFD_DEVICE, O_WRONLY);
-		ioctl ( file_vfd, VFDDISPLAYCHARS, &data );
+		ioctl (file_vfd, VFDDISPLAYCHARS, &data );
 		close (file_vfd);
 	}
 }
@@ -126,87 +635,121 @@
 	if (!blocked)
 	{
 		int i, len = strlen(text);
-		char out[17]={'\0'};
-		for (i=0; i<=(len-16); i++)
-		{ // scroll text till end
-			memcpy(out, text+i, 16);
+		char* out = (char *) malloc(63);
+		for (i = 0; i <= (len-63); i++)
+		{ // scroll text until end
+			memset(out, ' ', 63);
+			memcpy(out, text+i, 63);
 			vfd_write_string(out);
-			usleep(200000);
-		}
-		for (i=1; i<16; i++)
+			usleep(750000);
+		}
+		for (i = 1; i < 63; i++)
 		{ // scroll text with whitespaces from right
-			memcpy(out, text+len+i-16, 16-i);
-			memset(out+(16-i-1), ' ', i);
+			memset(out, ' ', 63);
+			memcpy(out, text+len+i-63, 63-i);
 			vfd_write_string(out);
-			usleep(200000);
-		}
-		memcpy(out, text, 16); // display first 16 chars after scrolling
+			usleep(750000);
+		}
+		memcpy(out, text, VFDLENGTH); //final: display first VFDLENGTH chars after scrolling
 		vfd_write_string(out);
-	}
-	return;
-}
+		free (out);
+	}
+//	return;
+}
+#endif
 
 void evfd::vfd_clear_string()
 {
-	vfd_write_string("                ");
-}
-
-void evfd::vfd_set_icon(tvfd_icon id, bool onoff)
-{
-	if (getVfdType() != 4) vfd_set_icon(id, onoff, false);
-}
-
-void evfd::vfd_set_icon(tvfd_icon id, bool onoff, bool force)
-{
-	if (getVfdType() != 4)
-	{
-		icon_onoff[id] = onoff;
-		if (!blocked || force)
-		{
-			struct set_icon_s data;
-
-			if (!startloop_running)
-			{
-				memset(&data, 0, sizeof(struct set_icon_s));
-				data.icon_nr=id;
-				data.on = onoff;
-				file_vfd = open (VFD_DEVICE, O_WRONLY);
-				ioctl(file_vfd, VFDICONDISPLAYONOFF, &data);
-				close (file_vfd);
-			}
-		}
-	}
-	return;
+	char out[VFDLENGTH + 1];
+	memset(out, 0, VFDLENGTH + 1);
+	memset(out, ' ', VFDLENGTH);
+	vfd_write_string(out, true);
+//	return;
+}
+
+void evfd::vfd_set_icon(int id, bool onoff)
+{
+	vfd_set_icon(id, onoff, false);
+//	return;
+}
+
+void evfd::vfd_set_icon(int id, bool onoff, bool force)
+{
+	icon_onoff[id] = onoff;
+	if (!blocked || force)
+	{
+		struct vfd_ioctl_data data;
+		if (!startloop_running)
+		{
+			memset(&data, 0, sizeof(struct vfd_ioctl_data));
+
+			data.start = 0x00;
+			data.data[0] = id;
+			data.data[4] = onoff;
+			data.length = 5;
+
+			file_vfd = open (VFD_DEVICE, O_WRONLY);
+			ioctl(file_vfd, VFDICONDISPLAYONOFF, &data);
+			close (file_vfd);
+		}
+	}
+//	return;
+}
+
+void evfd::vfd_set_led(int id, int onoff)
+{
+	led_onoff[id] = onoff;
+	struct vfd_ioctl_data data;
+	if (!startloop_running)
+	{
+		memset(&data, 0, sizeof(struct vfd_ioctl_data));
+		data.start = 0x00;
+		data.data[0] = id;
+		data.data[4] = onoff;
+		data.length = 5;
+		file_vfd = open (VFD_DEVICE, O_WRONLY);
+		ioctl(file_vfd, VFDSETLED, &data);
+		close (file_vfd);
+	}
+//	return;
 }
 
 void evfd::vfd_clear_icons()
 {
-	if (getVfdType() != 4)
-	{
-		for (int id = 1; id <= 45; id++)
-		{
-			vfd_set_icon((tvfd_icon)id, false);
-		}
-	}
-	return;
-}
-
-void evfd::vfd_set_brightness(unsigned char setting)
-{
-	if (getVfdType() != 4)
-	{
+	int id;
+
+	#if defined ENABLE_SPARK7162
+		for (id = 1; id < 46; id++)
+	#elif defined FORTIS_HDBOX
+		for (id = 1; id < 40; id++)
+	#elif defined OCTAGON1008
+		for (id = 1; id < 29; id++)
+	#elif defined ENABLE_ATEVIO7500
+		for (id = 1; id < 23; id++);
+	#elif defined ENABLE_UFS912 || defined ENABLE_UFS913
+		for (id = 1; id < 16; id++)
+	#else
+		for (id = 0x10; id < 0x20; id++)
+	#endif
+	{
+		vfd_set_icon(id, false);
+	}
+//	return;
+}
+
+void evfd::vfd_set_brightness(unsigned int setting)
+{
 	struct vfd_ioctl_data data;
 
-		memset(&data, 0, sizeof(struct vfd_ioctl_data));
-
-		data.start = setting & 0x07;
-		data.length = 0;
-
-		file_vfd = open (VFD_DEVICE, O_WRONLY);
-		ioctl ( file_vfd, VFDBRIGHTNESS, &data );
-		close (file_vfd);
-	}
-	return;
+	memset(&data, 0, sizeof(struct vfd_ioctl_data));
+
+	data.start = setting & 0x07;
+	data.length = 0;
+
+	file_vfd = open (VFD_DEVICE, O_WRONLY);
+	ioctl ( file_vfd, VFDBRIGHTNESS, &data );
+	close (file_vfd);
+//	return;
 }
 
 void evfd::vfd_set_light(bool onoff)
@@ -225,20 +768,53 @@
 	ioctl(file_vfd, VFDDISPLAYWRITEONOFF, &data);
 
 	close (file_vfd);
+//	return;
+}
+
+void evfd::vfd_set_fan(bool onoff)
+{
+#if defined(ENABLE_CUBEREVO) \
+ || defined(ENABLE_CUBEREVO_MINI) \
+ || defined(ENABLE_CUBEREVO_MINI2) \
+ || defined(ENABLE_CUBEREVO_MINI_FTA) \
+ || defined(ENABLE_CUBEREVO_250HD) \
+ || defined(ENABLE_CUBEREVO_2000HD) \
+ || defined(ENABLE_CUBEREVO_9500HD)
+	struct vfd_ioctl_data data;
+
+	memset(&data, 0, sizeof(struct vfd_ioctl_data));
+
+	if (onoff)
+	{
+		data.start = 0x01;
+	}
+	else
+	{
+		data.start = 0x00;
+	}
+	data.length = 0;
+	file_vfd = open (VFD_DEVICE, O_WRONLY);
+	ioctl(file_vfd, VFDSETFAN, &data);
+	close (file_vfd);
+#endif
 	return;
 }
 
-void evfd::vfd_set_fan(bool onoff)
-{
-	return;
-}
-
 void evfd::vfd_set_SCROLL(int id)
 {
-	VFD_SCROLL=id;
+	if (id > 2)  //if more than 2, set 2 (scroll continously)
+	{
+		id = 2;
+	}
+	if (id < 0) //if less than zero, set zero (no scroll)
+	{
+		id = 0;
+	}
+	VFD_SCROLL = id;
 }
 
 void evfd::vfd_set_CENTER(bool id)
 {
-	VFD_CENTER=id;
-}
+	VFD_CENTER = id;
+}
+// vim:ts=4
--- enigma2-openpli-fulan.org/lib/driver/vfd.h
+++ enigma2-openpli-fulan/lib/driver/vfd.h
@@ -30,16 +30,17 @@
 	int getVfdType() { return vfd_type; }
 	void vfd_set_SCROLL(int id);
 	void vfd_set_CENTER(bool id);
-	void vfd_set_icon(tvfd_icon id, bool onoff);
-	void vfd_set_icon(tvfd_icon id, bool onoff, bool force);
+	void vfd_set_icon(int id, bool onoff);
+	void vfd_set_icon(int id, bool onoff, bool force);
+	void vfd_set_led(int id, int onoff);
 	void vfd_clear_icons();
 
-	void vfd_write_string(const char * string);
-	void vfd_write_string(const char * str, bool force);
-	void vfd_write_string_scrollText(const char* text);
+	void vfd_write_string(char * string);
+	void vfd_write_string(char * str, bool force);
+	void vfd_write_string_scrollText(char* text);
 	void vfd_clear_string();
-	
-	void vfd_set_brightness(unsigned char setting);
+
+	void vfd_set_brightness(unsigned int setting);
 	void vfd_set_light(bool onoff);
 	void vfd_set_fan(bool onoff);
 };
--- enigma2-openpli-fulan.org/main/bsod.cpp
+++ enigma2-openpli-fulan/main/bsod.cpp
@@ -155,7 +155,7 @@
 		strftime(tm_str, sizeof(tm_str), "%a %b %_d %T %Y", &tm);
 
 		fprintf(f,
-			"Taapat based on OpenPLi Enigma2 crash log\n\n"
+			"OpenPLi Enigma2 crash log\n\n"
 			"crashdate=%s\n"
 			"compiledate=%s\n"
 			"skin=%s\n"
@@ -198,7 +198,7 @@
 	gPainter p(my_dc);
 	p.resetOffset();
 	p.resetClip(eRect(ePoint(0, 0), my_dc->size()));
-	p.setBackgroundColor(gRGB(0x008000));
+	p.setBackgroundColor(gRGB(0x000080));
 	p.setForegroundColor(gRGB(0xFFFFFF));
 
 	int hd =  my_dc->size().width() == 1920;
@@ -213,13 +213,13 @@
 	os << "We are really sorry. Your STB encountered "
 		"a software problem, and needs to be restarted.\n"
 		"Please send the logfile " << crashlog_name << " to " << crash_emailaddr << ".\n"
-		"Your STB restarts in 10 seconds!\n"
+		"Your STB will restart in 30 seconds...\n"
 		"Component: " << component;
 
 	p.renderText(usable_area, os.str().c_str(), gPainter::RT_WRAP|gPainter::RT_HALIGN_LEFT);
 
 	std::string logtail;
-	int lines = 20;
+	int lines = 35;
 	
 	if (logp2)
 	{
@@ -263,12 +263,12 @@
 
 	if (!logtail.empty())
 	{
-		font = new gFont("Regular", hd ? 21 : 14);
+		font = new gFont("Regular", hd ? 14 : 10);
 		p.setFont(font);
 		usable_area = eRect(hd ? 30 : 100, hd ? 180 : 170, my_dc->size().width() - (hd ? 60 : 180), my_dc->size().height() - (hd ? 30 : 20));
 		p.renderText(usable_area, logtail, gPainter::RT_HALIGN_LEFT);
 	}
-	sleep(10);
+	sleep(30);
 
 	/*
 	 * When 'component' is NULL, we are called because of a python exception.


